using Typesetting;
using typesetting.style.Styles;

var dt = DateTime.now();
var doc = new Typesetting.Document(Typesetting.Style.ArticleA4, {
    toc: true,
    lof: true,
    lot: true,
    xref: "typesetting.json",
    filepath: __FILE__.parentPath(),
});

doc.setMultibyteFont('jp');

var title = new Typesetting.Component.Title();
title.setTitle("Kinx TT - Kinx Tiny Typesetting");
title.setAuthor("Kray-G, Mr.Diamond Global Blue Publisher");
title.setDate(dt.format("%MMMM% %DD%, %YYYY%"));
doc.apply(title);

doc.apply(new Typesetting.Component.Abstract(%{
    This system is a small typesetting system written in Kinx.
    Most of people knows the \LaTeX\footnote{Leslie Lamport, https://en.wikipedia.org/wiki/LaTeX} is being used for that purpose,
    but the \TeX\footnote{Donald E. Knuth, https://en.wikipedia.org/wiki/TeX} system is very huge.
    This system provides only a limited functionality,
    but supports some of \TeX algorithms in this small system.
    This would be your best partner as long as used for your personal use.
    By the way, note that this document describes just a feature but less technical information.
    Please wait for the technical document, and I will prepare that as soon as possible.
}));

doc.toc();

doc.apply(new Typesetting.Component.Section("Overview"));
doc.apply(new Typesetting.Component.SubSection("Goals"));

doc.apply(new Typesetting.Component.Paragraph(%{
    The goal of the Kinx Tiny Typesetting is as follows.
}));

doc.apply(new Typesetting.Component.Itemize({
    labelType: 'item',
    items: [
        "Keeping it small.",
        "Pretty beautiful.",
        "Direct output to PDF.",
    ]
}));

doc.apply(new Typesetting.Component.Paragraph(%{
    Kinx TT has supported some kind of \TeX algorithms, so the final output would be pretty beautiful.
    You can check it yourself as this document was generated by this system.
    On the other hand, there are some known bad points below as a trade off.
}));

doc.apply(new Typesetting.Component.Itemize({
    labelType: 'item',
    items: [
        "Needs a performance improvement.",
        "Prvides only a limited functionality.",
    ]
}));

doc.apply(new Typesetting.Component.SubSection("Features Overview"));

doc.apply(new Typesetting.Component.Paragraph(%{This system supports following features.}));

doc.apply(new Typesetting.Component.Itemize({
    labelType: 'enum',
    items: [
        "Hyphenation & Knuth-Plass Line Breaking Algorithm, and also for some Japanese rules.",
        "Widows & Orphans penalty control.",
        "Listing items with a bullet or numbering.",
        "Math formula & equation like \\TeX.",
        "Tables. The header of table is automatically repeated each page.",
        "Images. It can be also put with floating inside paragraph.",
        "Colors. CMYK, RGB, and a lot of color names are supported.",
        "Chart. All the charts of Chart.js are supported.",
        "Writing a program source code.",
        "Cross-reference like ``\\bold{Reference to the section \\nameref{Sec:Table}} in the page \\pageref{Sec:Table}.''",
        "Autimatic URL hyperlink like https://en.wikipedia.org/wiki/TeX, or link text like \\url[https://en.wikipedia.org/wiki/TeX]{\\TeX}.",
        "Footnotes\\footnote{This is a footnote example.}.",
        "Ligature. Only 5 words of fi, fl, ff, ffi, ffl are supported.",
        "\\ruby[how to read]{Japanese Ruby}. \\ruby[にほんご]{日本語}, or \\ruby[に|ほん|ご]{日本語} to be separated for each character.",
    ]
}));

doc.pageBreak();

doc.apply(new Typesetting.Component.Section("Features Details"));
doc.apply(new Typesetting.Component.SubSection("Hyphenation & Line Breaking"));

doc.apply(new Typesetting.Component.Image({
    label: "Fig:Hyphenation",
    float: { right: true },
    scale: 0.5,
    caption: "Hyphenation and justification",
    file: "linebreak.png",
}));

doc.apply(new Typesetting.Component.Paragraph(%{
    The figure on the right\footnote{This is also the example of a floating image.} is an example of hyphenation and justification.
    Hyphenation will be done before applying line-breaking algorithm.
    The algorithm is based on \monotype{Hyper.js},
    and it relies on the hyphenation algorithm by Franklin M. Liang commonly known from \LaTeX.

    And also, this system is supporting \bold{Knuth-Plass Line Breaking Algorithm} for line-break.
    This is well known algorithm because the \TeX uses it.
    These algorithms are known as the best way so far for a typesetting system.

    Kinx TT is also supporting some Japanese hyphenation rules.
    For example, 「。」, which is like a period in English, never appears at the head of line.
}));

doc.apply(new Typesetting.Component.SubSection("Widows & Orphans"));

doc.apply(new Typesetting.Component.Paragraph(%{
    Widows and orphans control is not perfect so far.
    But normally it is available for a section and a paragraph.
    Unfortunately it is not available for listing items, images, and so on.
    Please check it and you can use \monotype{\\columnbreak} command anywhere you need.
}));

doc.apply(new Typesetting.Component.SubSection("List Items"));

doc.apply(new Typesetting.Component.Paragraph(%{
    You can use an \bold{itemize} and an \bold{enumerate} listing items as follows.
}));

var col = new Typesetting.Component.Column(2);
col.addColumn(&{
    doc.apply(new Typesetting.Component.Paragraph(%{
        Here is an example of 'itemize'.
    }));
    doc.apply(new Typesetting.Component.Itemize({
        labelType: 'item',
        items: [
            "Item level 1-1",
            "Item level 1-2",
            {
                labelType: 'item',
                items: [
                    "Item level 2-1",
                    "Item level 2-2",
                    "Item level 2-3",
                    {
                        labelType: 'item',
                        items: [
                            "Item level 3-1",
                            "Item level 3-2",
                            {
                                labelType: 'item',
                                items: [
                                    "Item level 4-1",
                                    "Item level 4-2",
                                ]
                            },
                        ]
                    },
                ]
            },
        ]
    }));
});
col.addColumn(&{
    doc.apply(new Typesetting.Component.Paragraph(%{
        Here is an example of 'enumerate'.
    }));
    doc.apply(new Typesetting.Component.Itemize({
        labelType: 'enum',
        items: [
            "Item level 1-1",
            "Item level 1-2",
            {
                labelType: 'enum',
                items: [
                    "Item level 2-1",
                    "Item level 2-2",
                    "Item level 2-3",
                    {
                        labelType: 'enum',
                        items: [
                            "Item level 3-1",
                            "Item level 3-2",
                            {
                                labelType: 'enum',
                                items: [
                                    "Item level 4-1",
                                    "Item level 4-2",
                                ]
                            },
                        ]
                    },
                ]
            },
        ]
    }));
});
doc.apply(col);
doc.columnBreak();

doc.apply(new Typesetting.Component.SubSection("Math Formula and Equation"));

doc.apply(new Typesetting.Component.Paragraph(%{
    Here is an example of Math formula and equation.
    You will think as if it is \LaTeX output.
    Yes, you are quite right because this is came from \TeX output,
    but it is never using a huge \TeX system.
    Instead, it is using an output of \KaTeX, which is included in this system.
}));

var math = new Typesetting.Component.Math(%{
    \begin{aligned}
        E &= mc^2 \\
        m &= \frac{m_0}{\sqrt{1-\frac{v^2}{c^2}}} \\
    \end{aligned}
});
math.setLabel(["Math:1", 0.2]);
math.setLabel(["Math:2", 0.6]);
doc.apply(math);
math = new Typesetting.Component.Math(%{
    \begin{aligned}
        \int_{-\infty}^{\infty} f(x) dx &= \sqrt{\pi}
    \end{aligned}
});
math.setLabel("Math:3");
doc.apply(math);

doc.apply(new Typesetting.Component.Paragraph(%{
    If you want to write a math formula inline, use \verb{$...$} style directly in paragraph.
    For example, $E = mc^2$ is written as \verb{$E = mc^2$},
    and another example is $\int_{-\infty}^{\infty} f(x) dx = \sqrt{\pi}$ same as \ref{Math:3}.
    As \KaTeX does not support \monotype{\\label} command, the label is being provided by Kinx TT.
    \color[red]{Therefore note that you need to control it by yourself a little.}

    If you want to use just ``\$'' in paragraph, use \$ with \\ as \verb{\$}.

    And also you can use \verb{\displaystyle} keyword.
    The Math formula can be directly put inside paragraph like $\displaystyle\int_{-\infty}^{\infty} f(x) dx = \sqrt{\pi}$,
    by \verb{$\displaystyle\int_{-\infty}^{\infty} f(x) dx = \sqrt{\pi}$}.
}));

var section = new Typesetting.Component.SubSection("Table");
section.setLabel("Sec:Table");
doc.apply(section);

doc.apply(new Typesetting.Component.Paragraph(%{
    Here is an example of table.
    The ruled line can be selected from no line, a single line, or a double line.
    And you can set an alignment each column.
    Besides, the column width is also automatically calculated according to inside text size.

    By the way, you can write also a Math formula inside a table cell.
}));

var line = 0;
doc.apply(new Typesetting.Component.Table({
    caption: "Table Example Crossing The Page",
    cellAlign: "l||c|r",
    body: [
        "---",
        [
            "Left",
            "Center",
            "Right"
        ],
        "===",
        [
            "A"+(++line),
            "Aligned to the center\\footnote{This is a footnote in table.}.",
            "C1",
        ],
        "---",
        [
            "A"+(++line),
            "$\\displaystyle\\int_{-\\infty}^{\\infty} f(x) dx = \\sqrt{\\pi}$",
            "Aligned to the right.",
        ],
        "---",
        [ "A"+(++line), "Aligned to the center.", "On the right." ], "---",
        [ "A"+(++line), "Aligned to the center.", "On the right." ], "---",
        [ "A"+(++line), "Aligned to the center.", "On the right." ], "---",
        [ "A"+(++line), "Aligned to the center.", "On the right." ], "---",
        [ "A"+(++line), "Aligned to the center.", "On the right." ], "---",
    ]
}));
doc.apply(new Typesetting.Component.Paragraph(%{
    The table header can be automatically repeated each page.
}));

doc.apply(new Typesetting.Component.Paragraph(%{
    Tables can be put on a line by using multiple columns.
    Here is an example of 2 tables in a line.
    Note that the width will become narrow in this case,
    and also you should control to break a page yourself if crossing pages.
}));

col = new Typesetting.Component.Column(2);
col.addColumn(&{
    doc.apply(new Typesetting.Component.Table({
        header: 0,
        cellAlign: "cl",
        body: [
            "---",
            [
                "#",
                "Outline",
            ],
            "===",
            [
                "1",
                "Something",
            ],
            [
                "2",
                "Something",
            ],
            "---",
        ]
    }));
});
col.addColumn(&{
    doc.apply(new Typesetting.Component.Table({
        header: 0,
        cellAlign: "cl",
        body: [
            "---",
            [
                "#",
                "Overview",
            ],
            "===",
            [
                "1",
                "Something",
            ],
            [
                "2",
                "Something",
            ],
            "---",
            [
                "3",
                "$\\displaystyle\\int_{-\\infty}^{\\infty} f(x) dx = \\sqrt{\\pi}$ is\\\\\nan example of Math formula in the table.",
            ],
            "---",
        ]
    }));
});
doc.apply(col);

doc.apply(new Typesetting.Component.SubSection("Image"));
doc.apply(new Typesetting.Component.SubSubSection("Floating Image"));

doc.apply(new Typesetting.Component.Paragraph(%{
    Images can be put around a text, or put on a line as a standalone.
}));

doc.apply(new Typesetting.Component.Image({
    float: { left: true },
    scale: 0.5,
    caption: "Barcode Icon",
    file: "serial.png",
}));

doc.apply(new Typesetting.Component.Paragraph(%{
    The first example is for a floating image put around a text.
    The image on the left, which is a barcode icon example, is wrapped inside text.

    And also, the text around a floating image can be separated by multiple paragraphs like this.
    The line-break algorithm is correctly performed for a different width per line.
    By this mechanism, the text will wrap around a floating image and you can do it with only writing a paragraph as usual.
    You will be able to see this line is put under the image automatically.

    By the way, the scale for a floating image means the parcentage for the actual image size.
    Note that it is different from a scale for a non-floating image.

    You can also put a reference to an image like \nameref{Fig:Hyphenation}.
}));

doc.apply(new Typesetting.Component.SubSubSection("Standalone Image"));

doc.apply(new Typesetting.Component.Paragraph(%{
    This is an example of an image scaled at 75%, and the image is put with a caption.
    This scale for a non-floating image means a parcentage for the area within the margins.
    \image[scale=0.75,caption=Figure Example - Kinx Logo Image]{kinxlogo.png}
    This is an example of an image scaled at 40%.
    \image[scale=0.4]{kinxlogo.png}
    This example is the example of writing \monotype{\\image} command directly into a paragraph.
    Note that you can not float an image in this way,
    and you have to use \verb{\floatimage} command instead.
}));

doc.apply(new Typesetting.Component.Paragraph(%{
    If you want to multiple images in a line, please see below.
}));

col = new Typesetting.Component.Column(3);
col.addColumn(&{
    doc.apply(new Typesetting.Component.Paragraph(%{
        \image[scale=0.95]{kinxlogo.png}
    }));
});
col.addColumn(&{
    doc.apply(new Typesetting.Component.Paragraph(%{
        \image[scale=0.95]{kinxlogo.png}
    }));
});
col.addColumn(&{
    doc.apply(new Typesetting.Component.Paragraph(%{
        \image[scale=0.95]{kinxlogo.png}
    }));
});
doc.apply(col);

doc.apply(new Typesetting.Component.Paragraph(%{
    You will see 3 images in a line.
}));

doc.apply(new Typesetting.Component.SubSection("Colors"));

doc.apply(new Typesetting.Component.Paragraph(%{
    Changing a text color is supported by the command of \monotype{\\color}.
    You can specify the color by the name like red, or CMYK/RGB values directly.
    For example, please see below.
}));

doc.apply(new Typesetting.Component.Itemize({
    labelType: 'enum',
    items: [
        "\\color[red]{\\bold{Red}. This line should be colored by the name of \\monotype{[red]}.}",
        "\\color[green]{\\bold{Green}. This line should be colored by the name of \\monotype{[green]}.}",
        "\\color[blue]{\\bold{Blue}. This line should be colored by the name of \\monotype{[blue]}.}",
        "\\color[cyan1]{\\bold{Cyan}. This line should be colored by the name of \\monotype{[cyan1]}.}",
        "\\color[magenta1]{\\bold{Magenta}. This line should be colored by the name of \\monotype{[magenta1]}.}",
        "\\color[yellow]{\\bold{Yellow}. This line should be colored by the name of \\monotype{[yellow]}.}",
        "\\color[R=0,G=64,B=255]{\\bold{RGB}. This line should be colored by RGB value of \\monotype{[R=0,G=64,B=255]}.}",
        "\\color[C=0.5,M=0.8,Y=0.2,K=0.0]{\\bold{CMYK}. This line should be colored by CMYK value of \\monotype{[C=0.5,M=0.8,Y:0.2,K=0.0]}.}",
    ]
}));

doc.apply(new Typesetting.Component.SubSection("Chart"));

doc.apply(new Typesetting.Component.Paragraph(%{
    Chart is now available in the document.
    You can use any chart of Chart.js.
    Please look at the web site of https://www.chartjs.org/ if you want to know details.
}));

var randomize = function() {
    return Math.random() * 100;
};

var chart = new Typesetting.Component.Chart({
    float: { right: true },
    width: 800,
    height: 500,
    scale: 0.4,
    caption: "Line Chart Example",
    options: {
        type: 'line',
        data: {
            labels: ["January", "February", "March", "April", "May", "June", "July"],
            datasets:[{
                lineTension: 0,
                label: "Line A",
                data: [ randomize(), randomize(), randomize(), randomize(), randomize(), randomize(), randomize()],
                backgroundColor: "rgba(54, 162, 235, 0.2)",
                borderColor: "rgb(54, 162, 235)",
                borderWidth: 1
            }]
        },
        options: {
            legend: {
                labels: {
                    fontColor: '#36a2eb'
                }
            }
        }
    }
});
doc.apply(chart);

doc.apply(new Typesetting.Component.Paragraph(%{
    This is an example of chart as a floaing image.
    The chart can be used as a floating image or a standaone image.
    This example is a line chart, but so many charts are supported by Chart.js.
    For example, it is a bar chart, a stack chart, a area chart, a scatter chart,
    a pie chart, a doughnut chart, a polar area chart, a radar chart, and so on.
    Besides, you can also use a combination of bar and line chart if you want.
    See the \url[https://www.chartjs.org/]{Chart.js Web Site} for details.

    The next example is a radar chart as a standalone image.
}));

var chart = new Typesetting.Component.Chart({
    width: 600,
    height: 400,
    fontSize: 10,
    scale: 0.8,
    caption: "Radar Chart Example",
    options: {
        type: 'radar',
        data: {
            labels: [['Eating', 'Dinner'], ['Drinking', 'Water'], 'Sleeping', ['Designing', 'Graphics'], 'Coding', 'Cycling', 'Running'],
            datasets: [{
                label: 'My First dataset',
                backgroundColor: "rgba(255, 0, 0, 0.2)",
                borderColor: 'red',
                pointBackgroundColor: 'red',
                data: [
                    randomize(),
                    randomize(),
                    randomize(),
                    randomize(),
                    randomize(),
                    randomize(),
                    randomize()
                ]
            }, {
                label: 'My Second dataset',
                backgroundColor: "rgba(0, 0, 255, 0.2)",
                borderColor: 'blue',
                pointBackgroundColor: 'blue',
                data: [
                    randomize(),
                    randomize(),
                    randomize(),
                    randomize(),
                    randomize(),
                    randomize(),
                    randomize()
                ]
            }]
        },
        options: {
            legend: {
                position: 'top',
            },
            scale: {
                ticks: {
                    beginAtZero: true
                }
            }
        }
    }
});
doc.apply(chart);

doc.apply(new Typesetting.Component.Paragraph(%{
    Also about chart options, please see the \url[https://www.chartjs.org/]{Chart.js Web Site} for details.
}));

doc.pageBreak();

doc.apply(new Typesetting.Component.SubSection("Program Code"));

doc.apply(new Typesetting.Component.Paragraph(%{
    Here is an example of a source code.
    This code is a simple Kinx code of fibonacci function.
    The code is vary basic and it is often used for a benchmark.
}));

var code = new Typesetting.Component.Code(%{
function fib(n) {
    if (n < 3) return n;
    return fib(n-2) + fib(n-1);
}

native nfib(n) {
    if (n < 3) return n;
    return nfib(n-2) + nfib(n-1);
}

var tmr = new SystemTimer();
var r = fib(34);
var e = tmr.elapsed();
System.println("fib(34) = %8d, Normal Function: elapsed: %f" % r % e);

tmr.restart();
r = nfib(34);
e = tmr.elapsed();
System.println("fib(34) = %8d, Native Function: elapsed: %f" % r % e);

# fib(34) =  9227465, Normal Function: elapsed: 0.590539
# fib(34) =  9227465, Native Function: elapsed: 0.052000
});
code.showBox(Typesetting.BOX_SHADOW);
code.showLineNumber();
doc.apply(code);

doc.apply(new Typesetting.Component.Paragraph(%{
    This example is also an example of \monotype{native} Keyword in Kinx.
    The \monotype{native} Keyword means the function is directly assembled to x64 machine code,
    so the performance is very fast.
    In the above example, the native function is 10 times faster than the normal function.

    The code can be also shown with a line number and a box around the code.
    There are some box line types you can select as follows. 
}));

var codeLineType = new Typesetting.Component.Table({
    body: [
        "---",
        [
            "Type",
            "Meaning",
        ],
        "===",
        [
            "\\monotype{Typesetting.BOX_NORMAL}",
            "Normal line, by default.",
        ],
        "---",
        [
            "\\monotype{Typesetting.BOX_THIN}",
            "Thin line.",
        ],
        "---",
        [
            "\\monotype{Typesetting.BOX_THICK}",
            "Thick line.",
        ],
        "---",
        [
            "\\monotype{Typesetting.BOX_SHADOW}",
            "The shadow box. This is used in the example above.",
        ],
        "---",
    ]
});
codeLineType.setSize(0.95);
codeLineType.setCellAlign("l|l");
codeLineType.setCaption("The Box Line Type");
doc.apply(codeLineType);

doc.apply(new Typesetting.Component.SubSection("Cross Reference"));

doc.apply(new Typesetting.Component.Paragraph(%{
    Cross references are supported with \monotype{\\label}.
    The reference will be applied by \monotype{\\ref}, \monotype{\\pageref}, \monotype{\\textref}, and \monotype{\\nameref}.
    \monotype{\\ref} means just a number.
    \monotype{\\pageref} means a page number.
    \monotype{\\textref} means a text only.
    \monotype{\\nameref} means a number and a text.

    For example, write ``\monotype{\pack{\nameref{Sec:Table} in the page \pageref{Sec:Table}}}'',
    and ``\nameref{Sec:Table} in the page \pageref{Sec:Table}'' will appear.
}));

doc.apply(new Typesetting.Component.SubSection("Links"));

doc.apply(new Typesetting.Component.Paragraph(%{
    When writing just a URL like https://github.com/Kray-G/kinx, it will be there with a hyperlink automatically.
    If you want to write a link text instead of writing a hyperlink URL directly,
    you can use \monotype{\\url} command for that.
    For example, \monotype{\pack{\url[https://github.com/Kray-G/kinx]{Kray-G/kinx}}} will be \url[https://github.com/Kray-G/kinx]{Kray-G/kinx}
    with a hyperlink to the web site of https://github.com/Kray-G/kinx.
}));

doc.apply(new Typesetting.Component.SubSection("Footnotes"));

doc.apply(new Typesetting.Component.Paragraph(%{
    You can use \bold{footnote} for some additional explanation of the sentence.
    For example, this is a main sentence\footnote{This is a footnote for the main sentence.}
    and footnote will appear at the bottom of the page.
}));

doc.apply(new Typesetting.Component.SubSection("Ligature"));

doc.apply(new Typesetting.Component.Paragraph(%{
    The ligature for only 5 words of fi, fl, ff, ffi, ffl is now supported.
    For example, ``difficult'' has a ``ffi'' and you will see ffi instead of f{}f{}i.
}));

doc.apply(new Typesetting.Component.SubSection("Japanese Ruby"));

doc.apply(new Typesetting.Component.Paragraph(%{
    This is an requirement only for Japanese.
    In Japanese, there is a writing style called ``Ruby''
    which is the style of a small text written on the top of a main sentence to inform how to read a Kanji of a main sentence.
    For example, 「この\ruby[ほん]{本}はとても\ruby[おもしろ]{面白}いです。」,
    which means that ``this book is very interesting.''
    In general, so young children can not read Kanji,
    and also there is a case that even adult people can not read a difficult Kanji or the Kanji which they do not use usually.
    So ruby is used like \ruby[ほん]{本} for them.

    Kinx TT provides 2 types of ruby.
    One of those is like 「\ruby[すてき]{素敵}」.
    In this case, the ruby is for total words.
    You can see the 「て」 is just on the center between 「素」 and 「敵」.
    Another one is like 「\ruby[す|てき]{素敵}」.
    In this case, the ruby is for each Kanji one by one,
    and it allowed to break the line between 「素」 and 「敵」.
    By the way, 「素敵」 means ``wonderful'' in Japanese.
}));

doc.apply(new Typesetting.Component.Paragraph(%{
    As another example, the long ruby like 「\ruby[おおかみ]{狼}」 is okay.
    In an opposite way, the short ruby like 「\ruby[いちじく]{無花果}」 is also okay.
    You can also use English as a ruby such as 「\ruby[personalization]{個人化}」, or 「\ruby[個人化]{personalization}」.

    Anyway you can free to use a ruby in your document.
}));

doc.save("typesetting.pdf");
