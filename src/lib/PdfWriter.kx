using writer.Fonts;
using writer.PdfDirectWriter;

namespace Typesetting {

    class PdfWriter(pagesize, direction, info_) {
        var writer_;
        var pdf_, page_, margin_, pageMargin_, marginCache_;
        var cols_, curCol_, isColMoved_;
        var pagesize_, direction_;
        var x_, y_, width_, height_, ascent_;
        var ytop_, ybottom_, colBottom_, colHeight_;
        var isTopOfPage_, lastLineFeedWidth_, floating_, tocBasePage_, setPageToOdd_;
        var footnotes_ = [];
        var fonts_;
        var fontObjSerif_, fontObjSans_, fontObjMonotype_, fontObjSerifBase_, fontObjSansBase_, fontObjMonotypeBase_;

        private initialize() {
            @pages = [];
            writer_ = new Typesetting.PdfDirectWriter(info_, @pages);
            pdf_ = writer_.getPdf();
            Typesetting.loadFonts(pdf_);
            [ fontObjSerif_, fontObjSans_, fontObjMonotype_, fontObjSerifBase_, fontObjSansBase_, fontObjMonotypeBase_ ]
                = Typesetting.getFontObjBase();

            info_.context.counter.page = 0;
            @setPageMargin(info_.base.margin);
            @setPageSize(pagesize, direction);

            cols_ = 1;
            curCol_ = 0;
            @addPage();
            x_ = y_ = -1;
        }

        public getPdf() {
            return pdf_;
        }

        public getPage() {
            return page_;
        }

        public loadAdditionalFonts(lang) {
            return writer_.loadAdditionalFonts(lang);
        }

        public loadFontFile(name, type, shape, filepath, index) {
            # name is the name, identifier
            # type is 'serif', 'sans', or 'monotype'.
            # shape is 'regular', 'bold', 'italic', or 'bolditalic'.
            if (fonts_[name].isUndefined) {
                fonts_[name] = writer_.loadFontFile(name, type, shape, filepath, index);
            }
            return fonts_[name];
        }

        public getFontByName(name) {
            return fonts_[name];
        }

        public getFontObjBase() {
            return Typesetting.getFontObjBase();
        }

        public getPageNumber() {
            if (page_.isUndefined) {
                return info_.context.counter.page + 1;
            }
            return info_.context.counter.page;
        }

        public adjustTopPageToOdd() {
            if (setPageToOdd_) {
                @addPage();
            }
        }
        public setPageToOdd() {
            setPageToOdd_ = true;
            if (page_.isUndefined) {
                @addPage();
            }
            if ((page_.number & 0x01) == 0x00) {
                page_.noPageNumber = true;
                @pageBreak();
                @addPage();
            }
            marginCache_ = null;
        }

        public getColumnNumber() {
            return curCol_;
        }

        public isColumnMoved() {
            return isColMoved_;
        }

        public getLastLineFeedWidth() {
            return lastLineFeedWidth_;
        }

        public getColumnWidth(pageWidth, asFullWidth) {
            if (!page_) {
                @addPage();
            }
            pageWidth ??= page_.getWidth();
            if (asFullWidth) {
                return pageWidth - pageMargin_.left - pageMargin_.right;
            }
            return (pageWidth - pageMargin_.left - pageMargin_.right - (pageMargin_.alley * (cols_ - 1))) / cols_;
        }

        public getAreaWidth(lineFeedWidth) {
            if (!page_) {
                @addPage();
            }
            var pageWidth = page_.getWidth();
            var width = getColumnWidth(pageWidth);
            var ldiff = margin_.left - pageMargin_.left;
            var rdiff = margin_.right - pageMargin_.right;
            width = width - ldiff - rdiff;
            if (!floating_ || floating_.done) {
                return [width];
            }
            if (!lineFeedWidth) {
                lineFeedWidth = info_.context.font.fontSize * info_.context.page.lineFeedWidthRatio;
            }
            var y = y_, e = floating_.bottom;
            widthList = [];
            for ( ; y >= e; y -= lineFeedWidth) {
                widthList.push(floating_.lineArea);
            }
            if (y >= e) {
                return widthList;
            }
            widthList.push(width);
            return widthList;
        }

        public loadImage(pathbase) {
            var path = pathbase;
            if (!File.exists(path)) {
                path = info_.context.filepath / pathbase;
                if (!File.exists(path)) {
                    throw RuntimeException("Image file not found: " + pathbase);
                }
            }
            if (path.endsWith(".png")) {
                return pdf_.loadPngImageFromFile(path);
            } else if (path.endsWith(".jpg") || path.endsWith(".jpeg")) {
                return pdf_.loadJpegImageFromFile(path);
            }
            throw RuntimeException("Unsupported image file format: " + path);
        }

        public drawLine(left, top, width, height, lineWidth, color, pageref) {
            if (pageref < 0) {
                writer_.drawLine(@pages[pageref], left, top, width, height, lineWidth, color);
                return;
            }
            if (!page_) {
                @addPage();
            }
            writer_.drawLine(page_, left, top, width, height, lineWidth, color);
        }

        public drawFullWidthLine(lineWidth, color, pageref) {
            var margin = @makeMarginSize();
            if (pageref < 0) {
                writer_.drawLine(@pages[pageref], margin.left, y_, margin.width, 0, lineWidth, color);
                return;
            }
            if (!page_) {
                @addPage();
            }
            writer_.drawLine(page_, margin.left, y_, margin.width, 0, lineWidth, color);
        }

        public drawBox(left, top, width, height, lineWidth, color, bgcolor, pageref) {
            if (pageref < 0) {
                writer_.drawBox(@pages[pageref], left, top, width, height, lineWidth, color, bgcolor);
                return;
            }
            if (!page_) {
                @addPage();
            }
            writer_.drawBox(page_, left, top, width, height, lineWidth, color, bgcolor);
        }

        public drawPageMargin() {
            var margin = @makeMarginSize();
            writer_.drawBox(
                page_,
                pageMargin_.left,
                margin.pageHeight - pageMargin_.top,
                margin.pageWidth - pageMargin_.right - pageMargin_.left,
                margin.pageHeight - pageMargin_.bottom - pageMargin_.top
            );
        }

        public writeFloatingImage() {
            if (!floating_ || floating_.done) {
                return;
            }
            var page;
            if (!page_) {
                page = @pages[-1];
                @addPage();
            } else {
                page = page_;
            }
            var padding = floating_.padding;
            var padding2 = padding * 2;
            var left = floating_.left;
            var top = floating_.top - floating_.height;
            var width = floating_.width;
            var height = floating_.height;
            writer_.drawImage(page, floating_.image, left + padding, top + padding, width - padding2, height - padding2);
            if (info_.base.draw.imageBox || floating_.lineWidth > 0) {
                writer_.drawBox(page, left, top + height, width, height, floating_.lineWidth);
            }
            if (floating_.captionHook.isFunction) {
                floating_.captionHook(floating_.left + floating_.width / 2, floating_.captionY, top, floating_.height);
            }
            floating_.done = true;
        }

        public createOutline(parent, name, isOpened) {
            return writer_.createOutline(pdf_, parent, name, isOpened);
        }

        public setCurrentPage(outline, y) {
            writer_.setContentsPage(@pages[-1], outline, y);
        }

        public setContentsPage(outline, y) {
            writer_.setContentsPage(page_, outline, y);
        }

        public setX(x) {
            x_ = x;
        }

        public setY(y) {
            y_ = y;
        }

        public updateY() {
            if (y_ < 0) {
                var margin = @makeMarginSize();
                y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top - ascent_);
            }
        }

        public setYHead() {
            ytop_ = y_;
            isTopOfPage_ = true;
        }

        public addY(y, isTop) {
            isTopOfPage_ = isTop;
            if (y_ > 0) {
                y_ -= y;
                if (floating_.isDefined && y_ <= floating_.bottom) {
                    writeFloatingImage();
                }
            }
        }

        public setPageSize(pagesize, direction) {
            pagesize_ = pagesize;
            direction_ = direction;
        }

        public setMargin(margin) {
            margin_ = margin.clone();
            marginCache_ = null;
        }

        public getMargin() {
            return margin_.clone();
        }

        public setPageMargin(margin) {
            pageMargin_ = margin.clone();
            margin_ = margin.clone();
            marginCache_ = null;
        }

        public getPageMargin() {
            return pageMargin_.clone();
        }

        private setColumnBottom() {
            colBottom_ = y_ - colHeight_;
            if (colBottom_.isUndefined) {
                return;
            }
            var margin = @makeMarginSize();
            var bottomMin = (ybottom_ > 0 ? ybottom_ : margin.bottom);
            if (colBottom_ < bottomMin) {
                colBottom_ = bottomMin;
            }
        }

        public setPos(pos) {
            x_ = pos.x;
            y_ = pos.y;
            colBottom_ = null;
        }

        public getPos(force) {
            if (!force && x_ < 0) {
                var margin = @makeMarginSize();
                return { x: margin.left, y: y_ };
            }
            return { x: x_, y: y_ };
        }

        public setColumn(cols, height) {
            if (cols != cols_) {
                cols_ = cols;
                curCol_ = 0;
                x_ = -1;
                if (colBottom_.isDefined) {
                    y_ = colBottom_ - lastLineFeedWidth_;
                }
                ytop_ = y_;
                colBottom_ = null;
                colHeight_ = height;
                setColumnBottom() if (colHeight_.isDefined);
                isTopOfPage_ = true;
            }
            marginCache_ = null;
        }

        public makeMarginSize(opts) {
            var asFullWidth = opts.fullWidth;
            var cache = opts.cache ?? true;
            if (!page_) {
                @addPage();
            }
            if (!marginCache_ || !cache) {
                var curCol = asFullWidth ? 0 : curCol_;
                var pageHeight = page_.getHeight();
                var pageWidth = page_.getWidth();
                var width = getColumnWidth(pageWidth, asFullWidth);
                var ldiff = margin_.left - pageMargin_.left;
                var rdiff = margin_.right - pageMargin_.right;
                var pleft = pageMargin_.left + ((width + margin_.alley) * curCol);
                var left = margin_.left + ((width + margin_.alley) * curCol);
                marginCache_ = {
                    pageHeight: pageHeight,
                    pageWidth: pageWidth,
                    columnWidth: width,
                    height: pageHeight - margin_.bottom - margin_.top,
                    width: width - ldiff - rdiff,
                    left: left,
                    right: pageWidth - pleft - width,
                    top: margin_.top,
                    bottom: margin_.bottom,
                };
            }
            return marginCache_;
        }

        private makeFormattedText(page, format) {
            var info = page.info;
            if (page.noPageNumber) {
                format = format.replace("<counter:page>", "");
            }
            return format
                .replace(/<counter:([a-zA-Z][0-9a-zA-Z]*)>/) {
                    &(counter) => info.counter[counter[1].string] - info_.context.tocinfo.lastPage
                }
                .replace(/<name:([a-zA-Z][0-9a-zA-Z]*),([0-9])>/) {
                    &(name) => info.name[name[1].string][Integer.parseInt(name[2].string)]
                }
            ;
        }

        private writeText(page, x, y, text, width, value) {
            if (x >= 0 && y >= 0 && text) {
                writer_.writeText(page, text, value, x, y, 0, width);
            }
        }

        private writeHeader(page) {
            var header = info_.base.header;
            var format = (((page.number & 0x01) == 0x00) ? header.format.even : header.format.odd) ?? header.format;
            var fontObj = fontObjSerifBase_.regular;
            var fontSize = header.fontSize;
            writer_.setFontAndSize(page, fontObj, fontSize);

            var ascent = (fontObj.getAscent() / 1000) * fontSize;
            var y = page.getHeight() - (header.margin.top ?? (info_.base.margin.top * 0.6)) - ascent;
            if (format.center) {
                var text = makeFormattedText(page, format.center);
                var width = page.getWidth() - pageMargin_.left - pageMargin_.right;
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = pageMargin_.left + ((width - nwidth) / 2);
                writeText(page, x, y, text, nwidth);
            }
            if (format.left) {
                var text = makeFormattedText(page, format.left);
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = pageMargin_.left;
                writeText(page, x, y, text, nwidth);
            }
            if (format.right) {
                var text = makeFormattedText(page, format.right);
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = page.getWidth() - pageMargin_.right - nwidth;
                writeText(page, x, y, text, nwidth);
            }
        }

        private writeFooter(page) {
            var footer = info_.base.footer;
            var format = (((page.number & 0x01) == 0x00) ? footer.format.even : footer.format.odd) ?? footer.format;
            var fontObj = fontObjSerifBase_.regular;
            var fontSize = footer.fontSize;
            writer_.setFontAndSize(page, fontObj, fontSize);

            var y = footer.margin.bottom ?? (info_.base.margin.bottom * 0.6);
            if (format.center) {
                var text = makeFormattedText(page, format.center);
                var width = page.getWidth() - pageMargin_.left - pageMargin_.right;
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = pageMargin_.left + ((width - nwidth) / 2);
                writeText(page, x, y, text, nwidth);
            }
            if (format.left) {
                var text = makeFormattedText(page, format.left);
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = pageMargin_.left;
                writeText(page, x, y, text, nwidth);
            }
            if (format.right) {
                var text = makeFormattedText(page, format.right);
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = page.getWidth() - pageMargin_.right - nwidth;
                writeText(page, x, y, text, nwidth);
            }
        }

        private writeFootnote(page, node, x, y) {
            var width = node.width;
            var value = node.value;
            if (value) {
                var font = value.font;
                var fontSize = value.size;
                writer_.setFontAndSize(page, font, fontSize);
                writer_.writeText(page, value.word, value, x + value.offsetX, y, value.offsetY, width);
            }
            return x + width;
        }

        private flushFootnotes(page) {
            if (footnotes_.length() > 0) {
                var margin = info_.base.footnote.margin;
                var labelsep = info_.base.footnote.labelsep;
                var multilinesep = info_.base.footnote.multilinesep;
                var measure = info_.measure;
                var fontObj = fontObjSansBase_.regular;
                var fontSize = info_.base.footnote.fontSize * info_.base.footnote.numberSizeRatio;
                # Currently supported the footnote is always in 1 column.
                var fn = [], flush = [];
                var fs = footnotes_.length();
                ybottom_ = 0;
                for (var f = 0; f < fs; ++f) {
                    var footnote = footnotes_[f];
                    if (!footnote.good) {
                        fn.push(footnote);
                    } else {
                        flush.push(footnote);
                        ybottom_ = (ybottom_ > 0 ? ybottom_ : margin_.bottom) + footnote.lineFeedWidth;
                    }
                }
                var ypos = (ybottom_ > 0 ? ybottom_ : margin_.bottom) - 10.0;
                var fl = flush.length();
                for (var f = 0; f < fl; ++f) {
                    var footnote = flush[f];
                    var n = "" + footnote.number;
                    var nwidth = measure.textWidth(fontObj, fontSize, n);
                    var xpos = pageMargin_.left + margin - labelsep - nwidth;
                    writer_.setFontAndSize(page, fontObj, fontSize);
                    writeText(page, xpos, ypos + 2, n, nwidth);
                    var lines = footnote.lines;
                    for (var i = 0, ll = lines.length(); i < ll; ++i) {
                        xpos = pageMargin_.left + margin;
                        if (i > 0 && multilinesep.isDefined) {
                            xpos -= multilinesep;
                        }
                        var line = lines[i];
                        line.nodes.each { &(node)
                            xpos = writeFootnote(page, node, xpos, ypos);
                        };
                        ypos -= line.lineFeedWidth;
                    }
                };
                if (fl > 0) {
                    var width = page.getWidth() - pageMargin_.left - pageMargin_.right;
                    writer_.drawFootnoteLine(page, pageMargin_.left, ybottom_, pageMargin_.left + width * 0.7, ybottom_, 0.3, [0, 0, 0, 1]);
                }
                footnotes_ = fn;
                fl = fn.length();
                for (var f = 0; f < fl; ++f) {
                    var footnote = footnotes_[f];
                    ybottom_ = (ybottom_ > 0 ? ybottom_ : margin_.bottom) + footnote.lineFeedWidth;
                }
            }
        }

        public setAdjustment(cpage) {
            if (cpage == 0) {
                writer_.setAdjustment(0);
            } else if (info_.base.margin.odd.adjust && ((cpage & 0x01) == 0x01)) {
                writer_.setAdjustment(info_.base.margin.odd.adjust);
            } else if (info_.base.margin.even && ((cpage & 0x01) == 0x00)) {
                writer_.setAdjustment(info_.base.margin.even.adjust);
            }
        }

        private flushPage() {
            if (@pages.length() > 0) {
                var page = @pages[-1];
                setAdjustment(page.number);
                flushFootnotes(page);
                page.info.counter = info_.context.counter.clone();
                page.info.name = info_.context.name.clone();
            }
            info_.logger.info("Outputted the page [%{info_.context.counter.page}]");
        }

        public getPageIndex() {
            if (page_) {
                return page_.index;
            }
            return @pages.length();
        }

        public addPage() {
            flushPage();

            if (tocBasePage_) {
                # TOC Mode
                page_ = pdf_.insertPage(tocBasePage_);
                page_.isTocPage = true;
                page_.noPageNumber = true;
            } else {
                page_ = pdf_.addPage();
            }
            page_.text = [];
            page_.index = @pages.length();
            writer_.setCurrentPage(page_);

            writer_.setSize(page_, pagesize_, direction_);
            width_ = page_.getWidth();
            height_ = page_.getHeight();
            ytop_ = -1;
            ybottom_ = -1;
            isTopOfPage_ = true;
            @pages.push(page_);
            if (!info_.base.footnote.resetSectionLevel) {
                info_.context.counter.footnote = 0;
            }
            var cpage = ++info_.context.counter.page;
            page_.number = info_.context.toc ? (cpage - 1) : cpage;
            setAdjustment(page_.number);
            marginCache_ = null;
            if (info_.base.draw.margin) {
                drawPageMargin();
            }
        }

        public addFootnote(footnote) {
            footnotes_.push(footnote);
            ybottom_ = (ybottom_ > 0 ? ybottom_ : margin_.bottom) + footnote.lineFeedWidth;
        }

        private resolveFootnotes(r) {
            var l = footnotes_.length();
            for (var i = 0; i < l; ++i) {
                var f = footnotes_[i];
                if (r == f.number) {
                    f.good = true;
                }
            }
        }

        public columnBreak() {
            if (y_ >= 0) {
                isColMoved_ = true;
                x_ = -1;
                y_ = -1;
                if (cols_ > 0) {
                    curCol_ = (curCol_ + 1) % cols_;
                }
                if (curCol_ == 0) {
                    page_ = null;
                }
            } else {
                isColMoved_ = false;
            }
            marginCache_ = null;
        }

        public pageBreak() {
            if (page_.isDefined) {
                x_ = -1;
                y_ = -1;
                curCol_ = 0;
                page_ = null;
                marginCache_ = null;
            }
        }

        public clearFloat(lineFeedWidth) {
            writeFloatingImage();
            @clearFloatingImage(lineFeedWidth);
        }

        public isTopOfPage() {
            return isTopOfPage_;
        }

        public getPositionBase() {
            var margin = makeMarginSize();
            return { x: x_, y: y_, bottom: margin.bottom };
        }

        public getLineTop(fontObj, fontSize) {
            var ascent = fontObj ? ((fontObj.getAscent() / 1000) * fontSize) : ascent_;
            var margin = makeMarginSize();
            return (y_ > 0 ? (y_ + ascent) : (ytop_ > 0 ? ytop_ : (height_ - margin.top))) + 2;
        }

        public isColumnBreakPoint(totalLineFeeds, ybase) {
            var y = ybase ?? y_;
            if (y < 0 || totalLineFeeds == 0) {
                return false;
            }
            var margin = makeMarginSize();
            if (!margin) {
                return false;
            }
            y -= totalLineFeeds;
            var bottomMin = ybottom_ > 0 ? ybottom_ : margin.bottom;
            if (y < bottomMin) {
                return true;
            }
            return false;
        }

        public checkColumnBreak(totalLineFeeds) {
            if (isColumnBreakPoint(totalLineFeeds)) {
                @columnBreak();
            }
        }

        public lineBreak(lineFeedWidth, stayX) {
            if (y_ < 0) {
                if (curCol_ > 0) {
                    var margin = makeMarginSize();
                    y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top - ascent_);
                    colBottom_ = null;
                }
                return false;
            }
            lastLineFeedWidth_ = lineFeedWidth;
            x_ = -1 if (!stayX);
            setColumnBottom() if (colBottom_.isUndefined && colHeight_.isDefined);
            y_ -= lineFeedWidth;
            if (floating_.isDefined && y_ <= floating_.bottom) {
                writeFloatingImage();
            }
            var margin = makeMarginSize();
            if (!margin) {
                return false;
            }
            var bottomMin = (ybottom_ > 0 ? ybottom_ : margin.bottom) + lineFeedWidth;
            var bottomChk = colBottom_ ?? bottomMin;
            isColMoved_ = false;
            if (y_ < bottomChk) {
                isColMoved_ = true;
                if (cols_ > 0) {
                    curCol_ = (curCol_ + 1) % cols_;
                }
                var lastY = y_;
                y_ = -1;
                if (curCol_ == 0) {
                    if (lastY < bottomMin) {
                        page_ = null;
                        isTopOfPage_ = true;
                    } else {
                        y_ = colBottom_ - lineFeedWidth;
                        colBottom_ = null;
                        @setYHead();
                    }
                }
                marginCache_ = null;
                return true;
            }
            isTopOfPage_ = false;
            return false;
        }

        public setMarginAbove(marginWidth) {
            if (page_ && y_ >= 0) {
                lineBreak(marginWidth);
            }
        }

        private setupWrite(value, width, isBox, x) {
            if (page_.isUndefined) {
                @addPage();
            }

            var margin = makeMarginSize();
            if (isBox) {
                var font = value.font;
                var fontSize = value.size;
                ascent_ = (font.getAscent() / 1000) * fontSize;
                if (y_ < 0) {
                    x_ = -1;
                    y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top - ascent_);
                    colBottom_ = null;
                }
                writer_.setFontAndSize(page_, font, fontSize);
            }
            if (x.isDefined) {
                x_ = x;
            } else if (x_ < 0) {
                x_ = margin.left;
            }
            return true;
        }

        public writeFloatingCaption(node, x, y) {
            var width = node.width;
            var value = node.value;
            if (!setupWrite(value, width, node.isBox, x)) {
                return false;
            }
            if (value) {
                writeText(page_, x + value.offsetX, y + value.offsetY, value.word, width);
            }
            x_ = -1;
            return true;
        }

        public writeMathCaption(node, y) {
            var width = node.width;
            var value = node.value;
            var margin = makeMarginSize();
            var x = margin.pageWidth - margin.right - width;
            if (!setupWrite(value, width, node.isBox, x)) {
                return false;
            }
            if (value) {
                writeText(page_, x, y, value.word, width);
            }
            x_ = -1;
            return true;
        }

        public writeImage(img, x, y) {
            var margin = makeMarginSize();
            if (x.isUndefined) {
                x = x_ < 0 ? margin.left : x_;
            }
            y ||= y_;
            var width = img.width;
            var height = img.height;
            writer_.drawImage(page_, img.image, x, y + img.offsetY, width, height);
            writer_.drawBox(page_, x, y + img.offsetY + height, width, height) if (info_.base.draw.imageBox);
            x_ = x + width;
            return true;
        }

        public writeCenter(text, fontObj, fontSize) {
            if (page_.isUndefined) {
                @addPage();
            }
            writer_.setFontAndSize(page_, fontObj, fontSize);
            var textWidth = info_.measure.textWidth(fontObj, fontSize, text);
            var margin = makeMarginSize();
            ascent_ = (fontObj.getAscent() / 1000) * fontSize;
            if (y_ < 0) {
                y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top - ascent_);
                colBottom_ = null;
            }
            var x = (margin.width - textWidth) / 2 + margin.left;
            writer_.writeText(page_, text, null, x, y_, 0, textWidth);
        }

        public write(node, x, y, isFloatingLine) {
            var value = node.value;
            if (value.isInlineImage) {
                return writeImage(value, x, y);
            }
            if (value.isVspace) {
                lineBreak(value.space, true);
                return true;
            }

            var width = node.width;
            if (!setupWrite(value, width, node.isBox, x)) {
                return false;
            }

            if (value) {
                var offsetX = value.offsetX;
                if (floating_.isDefined) {
                    if (!isFloatingLine) {
                        var savex = x_;
                        writeFloatingImage();
                        floating_ = null;
                        x_ = savex;;
                    } else if (floating_.floating.left) {
                        offsetX += (floating_.width + info_.base.image.leftsep);
                    }
                }
                x = x_ + offsetX;
                y = y ?? y_;
                writer_.writeText(page_, value.word, value, x, y, value.offsetY, width);
                if (value.isFootnote) {
                    resolveFootnotes(value.footnoteNumber);
                }
            }
            x_ += width;
            return true;
        }

        public setCoverPage() {
            if (page_) {
                page_.noPageNumber = true;
            }
        }

        public initTocPage(page) {
            if (page < 1) {
                throw RuntimeException("Invalid state for TOC");
            }

            setAdjustment(0);
            tocBasePage_ = @pages[page];
            if (info_.context.tocNewPage) {
                @addPage();
                x_ = y_ = -1;
                info_.context.tocPages = 1;
            } else {
                page_ = @pages[page-1];
                @setPos({ x: -1, y: info_.context.tocinfo.pos.y });
            }
            page_.isTocPage = true;
            page_.noPageNumber = true;
        }

        public clearFloatingImage(lineFeedWidth) {
            var counter = 0;
            const max = 100;
            while (floating_.isDefined && !floating_.done) {
                lineBreak(lineFeedWidth);
                if (max < ++counter) {
                    info_.logger.warn("Too many loop for clearing a floating image.");
                    break;
                }
            }
            if (floating_.bottom) {
                y_ = floating_.bottom - lineFeedWidth;
            }
            floating_ = null;
        }

        public loadFloatingImage(opts, captionHook) {
            var path = opts.path;
            var scale = opts.scale;
            var floating = opts.floating;
            var caption = opts.caption;
            var padding = Double.parseDouble(opts.padding);
            var lineWidth = opts.lineWidth;
            var lineFeedWidth = info_.context.font.fontSize * info_.context.page.lineFeedWidthRatio;
            if (floating_.isDefined && !floating_.done) {
                # linefeed to the bottom of image.
                clearFloatingImage(lineFeedWidth);
            }

            var image = path.isString ? loadImage(path) : path;
            var width = image.getWidth() + padding;
            var height = image.getHeight() + (padding * 2);
            if (!scale || scale > info_.base.image.maxWidth) {
                scale = info_.base.image.maxWidth;
            }

            var lrsep = floating.left ? info_.base.image.leftsep : info_.base.image.rightsep;
            var bsep = info_.base.image.bottomsep;
            var margin = makeMarginSize();
            var mwidth = margin.width * scale;
            var ratio = height / width;
            if (mwidth < width) {
                width = mwidth - lrsep;
                height = width * ratio;
            }

            var rightBase = margin.pageWidth - margin.right;
            var left = floating.left ? margin.left : (rightBase - width);
            var right = floating.left ? margin.left + width : rightBase;
            var lineArea = margin.width - (right - left) - lrsep;
            var captionArea = caption.isDefined ? lineFeedWidth : 0;
            var top = y_;
            floating_ = {
                floating: floating,
                width: width,
                height: height,
                image: image,
                captionHook: caption.isDefined ? captionHook : null,
                captionY: top - (height + lineFeedWidth - ascent_),
                lineArea: lineArea,
                left: left,
                top: top + bsep,
                bottom: top - (height + bsep) - captionArea,
                right: right,
                padding: padding,
                lineWidth: lineWidth,
            };
        }

        public imageTo(path, scale, align, opts) {
            var image = path.isString ? loadImage(path) : path;
            var width = image.getWidth();
            var height = image.getHeight();
            if (scale.isDefined) {
                width *= scale;
                height *= scale;
            }

            var padding = opts.padding ?? 0;
            var padding2 = + padding * 2;
            var margin = makeMarginSize();
            if (y_ > 0) {
                var bottomMin = (ybottom_ > 0 ? ybottom_ : margin.bottom) + height + padding2;
                if (y_ < bottomMin) {
                    isColMoved_ = true;
                    x_ = -1;
                    y_ = -1;
                    if (cols_ > 0) {
                        curCol_ = (curCol_ + 1) % cols_;
                    }
                    if (curCol_ == 0) {
                        page_ = null;
                        @addPage();
                    }
                    marginCache_ = null;
                    margin = makeMarginSize();
                }
            }
            var lineFeedWidth;
            if (y_ < 0) {
                x_ = -1;
                lineFeedWidth = 0;
                y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top);
                colBottom_ = null;
            } else {
                lineFeedWidth = lastLineFeedWidth_ / 2;
            }
            var left, padoffX = 0;
            if (margin.width < width) {
                scale = margin.width / width;
                width = width * scale;
                height = height * scale;
                left = margin.left;
                padoffX = padding;
            } else {
                scale = 1.0;
                if (align.center) {
                    padoffX = padding;
                    left = margin.left + (margin.width - width) / 2;
                } else if (align.right) {
                    padoffX = padding * 2;
                    left = margin.left + (margin.width - width) - padding;
                } else {
                    left = margin.left;
                }
            }
            var offsetY = lineFeedWidth - height;
            y_ += offsetY - padding;
            writer_.drawImage(page_, image, left, y_, width, height);
            if (info_.base.draw.imageBox || opts.lineWidth) {
                writer_.drawBox(page_, left - padoffX, y_ + height + padding, width + padding2, height + padding2, opts.lineWidth);
            }
            y_ -= padding;
            return [y_, height];
        }

        public save(file) {
            flushPage();
            writer_.flushAnnot();
            info_.logger.info("Finished to flush annotations.");

            if (info_.context.tocNewPage && ((info_.context.tocPages & 0x01) == 0)) {
                # The first page should be odd side.
                @addPage();
            }

            @pages.each { &(page)
                setAdjustment(page.number);
                writeHeader(page) if (!page.isTocPage);
                writeFooter(page);
            };
            info_.logger.info("Finished to flush headers and footers.");

            try {
                pdf_.saveToFile("_kittytemp.pdf");
                if (File.exists(file) && !File.remove(file)) {
                    info_.logger.error("Saving file was failed, temporary `_kittytemp.pdf` was created.");
                } else {
                    File.rename("_kittytemp.pdf", file);
                    info_.logger.info("Finished all.");
                }
            } catch (e) {
                info_.logger.error("%{e.what()} occured, temporary `_kittytemp.pdf` was created.");
                info_.logger.error("Saving file was failed, temporary `_kittytemp.pdf` was created.");
            }

            writer_.finalize();
        }
    }

} # namespace Typesetting
