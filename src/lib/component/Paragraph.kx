namespace Typesetting {

    namespace Component {

        class Paragraph(opts_, text_) : Component.Base(opts_) {
            var prevBq_;
            private initialize() {
                if (text_.isUndefined) {
                    [text_, opts_] = [opts_];
                }
            }
            public setText(text) {
                text_ = text;
            }
            public write(info, context, core, align) {
                [opts_, text_] = core.util.makeOption(opts_, text_);
                var savedColor = context.font.color;
                var writer = info.writer;
                var margin = writer.getMargin();
                if (context.notParagraph) {
                    prevBq_ = -1;
                }
                var bqLevel = opts_.blockquoteLevel;
                if (bqLevel > 0) {
                    if (info.base.resetIndentAfterNonParagraph && bqLevel != prevBq_) {
                        context.notParagraph = true;
                    }
                    context.font.color = info.base.blockquote.color;
                    opts_.vline = [];
                    for (var i = 0; i < bqLevel; ++i) {
                        opts_.vline.push(margin.left + (info.base.blockquote.indentSize * i) - info.base.blockquote.linesep);
                    }
                    opts_.margin.left = margin.left + (info.base.blockquote.indentSize * bqLevel);
                    opts_.vlineWidth = info.base.blockquote.lineWidth;
                }
                prevBq_ = bqLevel;

                var lines = core.paragraph.exec(opts_, text_);
                var lineFeedWidth = 0;
                var ll = lines.length();
                var op = info.base.orphanPenalty + 1;
                for (var i = 0, l = (op < ll ? op : ll); i < l; ++i) {
                    lineFeedWidth += lines[i].lineFeedWidth;
                }
                core.pendingParagraphList.push({
                    isParagraph: true,
                    lineFeedWidth: lineFeedWidth,
                    func: &() => {
                        core.util.write(lines, align, opts_);
                    },
                });
                core.flushParagraph();

                context.notParagraph = false;
                context.font.color = savedColor;
                writer.setMargin(margin);
            }
        }

    } # namespace Component

} # namespace Typesetting
