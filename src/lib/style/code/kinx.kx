namespace Typesetting {
namespace Style {

    var keywordList_ = [
        "break", "class", "catch", "case", "continue", "const", "do", "default", "else", "enum",
        "function", "for", "finally", "false", "if", "in", "module", "mixin", "null", "new", "native",
        "namespace", "otherwise", "public", "private", "protected", "return", "super", "switch", "this",
        "throw", "try", "true", "using", "undefined", "var", "when", "while", "yield",
        "int", "dbl", "str", "ary", "obj",
    ];

    Typesetting.Style.Code[__FILE__.stem()] = {
        theme: 'standard',
        pattern: [
            {
                name: "comment-single-line",
                pattern: /\/\/.+|\/\*(.+?)\*\/|#.+/,
            },
            {
                name: "comment-multi-line",
                pattern: /\/\*/,
                end: /\*\//,
            },
            {
                name: "keyword",
                pattern: new Regex("\\b(%{keywordList_.join('|')})\\b"),
            },
            {
                name: "regex-literal",
                pattern: /\/(?:\\\/|.)*?\/|%m\((?:\\\)|.)*?\)|%m\{(?:\\\}|.)*?\}|%m<(?:\\>|.)*?>|%m(.)(?:\\\1|.)*?\1/,
            },
            {
                name: "string-literal",
                pattern: /"(?:\\"|.)*?"|'(?:\\'|.)*?\'|%\((?:\\\)|.)*?\)|%\{(?:\\\}|.)*?\}|%<(?:\\>|.)*?>|%(.)(?:\\\1|.)*?\1/,
            },
            {
                name: "number",
                pattern: /0[0-7]*|[1-9][_0-9]*(?:\.[_0-9]+(?:[eE][-+][_0-9]+)?)?|0x[0-9a-fA-F][_0-9a-fA-F]*/,
            },
            {
                name: "function",
                pattern: /[\$_a-zA-Z][\$_a-zA-Z0-9]*(?=\()/,
            },
            {
                name: "variable-capital",
                pattern: /[\$_A-Z][\$_a-zA-Z0-9]*/,
            },
            {
                name: "variable",
                pattern: /[\$_a-z][\$_a-zA-Z0-9]*|_[1-9]/,
            },
        ],
    };

} # namespace Style
} # namespace Typesetting
