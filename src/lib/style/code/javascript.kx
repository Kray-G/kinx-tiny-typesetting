namespace Typesetting {
namespace Style {

    var keywordList_ = [
        "await", "break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete",
        "do", "else", "enum", "export", "extends", "false", "finally", "for", "function", "if", "import",
        "in", "instanceof", "new", "null", "return", "super", "switch", "this", "throw", "true", "try",
        "typeof", "var", "void", "while", "with", "yield",
        "let", "static", "implements", "interface", "package", "private", "protected", "public",
    ];

    Typesetting.Style.Code[__FILE__.stem()] = Typesetting.Style.Code.js = {
        theme: 'standard',
        pattern: [
            {
                name: "comment-single-line",
                pattern: /\/\/.+|\/\*(.+?)\*\/|#.+/,
            },
            {
                name: "comment-multi-line",
                pattern: /\/\*/,
                end: /\*\//,
            },
            {
                name: "keyword",
                pattern: new Regex("\\b(%{keywordList_.join('|')})\\b"),
            },
            {
                name: "regex-literal",
                pattern: /\/(?:\\\/|.)*?\/[gimu]/,
            },
            {
                name: "string-literal",
                pattern: /"(?:\\"|.)*?"|'(?:\\'|.)*?\'/,
            },
            {
                name: "number",
                pattern: /0[0-7]*|[1-9][_0-9]*(?:\.[_0-9]+(?:[eE][-+][_0-9]+)?)?|0x[0-9a-fA-F][_0-9a-fA-F]*/,
            },
            {
                name: "function",
                pattern: /[\$_a-zA-Z][\$_a-zA-Z0-9]*(?=\()/,
            },
            {
                name: "variable-capital",
                pattern: /[\$_A-Z][\$_a-zA-Z0-9]*/,
            },
            {
                name: "variable",
                pattern: /[\$_a-z][\$_a-zA-Z0-9]*|_[1-9]/,
            },
        ],
    };

} # namespace Style
} # namespace Typesetting
