namespace Typesetting {
namespace Style {

    var keywordList_ = [
        "False",  "None",  "True",   "and",      "as",
        "assert", "break", "class",  "continue", "def",
        "del",    "elif",  "else",   "except",   "finally",
        "for",    "from",  "global", "if",       "import",
        "in",     "is",    "lambda", "nonlocal", "not",
        "or",     "pass",  "raise",  "return",   "try",
        "while",  "with",
    ];

    Typesetting.Style.Code[__FILE__.stem()] = {
        theme: 'standard',
        pattern: [
            {
                name: "comment-single-line",
                pattern: /#.+/,
            },
            {
                name: "string-multi-line",
                pattern: /'''|"""/,
                end: { group: 0 },
            },
            {
                name: "keyword",
                pattern: new Regex("\\b(%{keywordList_.join('|')})\\b"),
            },
            {
                name: "regex-literal",
                pattern: /\/(?:\\\/|.)*?\/[ioxmnesu]/,
            },
            {
                name: "string-literal",
                pattern: /"(?:\\"|.)*?"|'(?:\\'|.)*?\'/,
            },
            {
                name: "number",
                pattern: /0[0-7]*|[1-9][_0-9]*(?:\.[_0-9]+(?:[eE][-+][_0-9]+)?)?|0x[0-9a-fA-F][_0-9a-fA-F]*/,
            },
            {
                name: "function",
                pattern: /[\$_a-zA-Z][\$_a-zA-Z0-9]*(?=\()/,
            },
            {
                name: "variable-capital",
                pattern: /[\$_A-Z][\$_a-zA-Z0-9]*/,
            },
            {
                name: "variable",
                pattern: /[\$_a-z][\$_a-zA-Z0-9]*/,
            },
        ],
    };

} # namespace Style
} # namespace Typesetting
