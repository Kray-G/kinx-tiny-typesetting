namespace Typesetting {
namespace Style {

    var keywordList_ = [
        "alignas", "alignof", "andb", "and_eqb", "asma", "auto", "bitandb", "bitorb", "bool", "break",
        "case", "catch", "char", "char8_tc", "char16_t", "char32_t", "class", "complb", "conceptc",
        "const", "const_cast", "constevalc", "constexpr", "constinitc", "continue", "co_awaitc",
        "co_returnc", "co_yieldc", "decltype", "default", "delete", "do", "double", "dynamic_cast",
        "else", "enum", "explicit", "exportc", "extern", "false", "float", "for", "friend", "goto",
        "if", "inline", "int", "long", "mutable", "namespace", "new", "noexcept", "notb", "not_eqb",
        "nullptr", "operator", "orb", "or_eqb", "private", "protected", "public", "register",
        "reinterpret_cast", "requiresc", "return", "short", "signed", "sizeof", "static", "static_assert",
        "static_cast", "struct", "switch", "template", "this", "thread_local", "throw", "true", "try",
        "typedef", "typeid", "typename", "union", "unsigned", "using", "declaration", "using", "directive",
        "virtual", "void", "volatile", "wchar_t", "while", "xorb", "xor_eqb",
    ];

    Typesetting.Style.Code[__FILE__.stem()] = Typesetting.Style.Code.cpp = Typesetting.Style.Code["c++"] = {
        theme: 'standard',
        pattern: [
            {
                name: "comment-single-line",
                pattern: /\/\/.+|\/\*(.+?)\*\//,
            },
            {
                name: "comment-multi-line",
                pattern: /\/\*/,
                end: /\*\//,
            },
            {
                name: "keyword",
                pattern: new Regex("\\b(%{keywordList_.join('|')})\\b"),
            },
            {
                name: "preprocessor",
                pattern: /#define|#ifdef|#if|#include|#error|#warning|#pragma|defined|<([^>]*)>/,
            },
            {
                name: "string-literal",
                pattern: /"(?:\\"|.)*?"|'(?:\\'|.)*?\'/,
            },
            {
                name: "number",
                pattern: /0[0-7]*|[1-9][_0-9]*(?:\.[_0-9]+(?:[eE][-+][_0-9]+)?)?|0x[0-9a-fA-F][_0-9a-fA-F]*/,
            },
            {
                name: "function",
                pattern: /[\$_a-zA-Z][\$_a-zA-Z0-9]*(?=\()/,
            },
            {
                name: "constant-value",
                pattern: /\\b[_A-Z]+\\b/,
            },
            {
                name: "variable-capital",
                pattern: /[\$_A-Z][\$_a-zA-Z0-9]*/,
            },
            {
                name: "variable",
                pattern: /[\$_a-z][\$_a-zA-Z0-9]*/,
            },
        ],
    };

} # namespace Style
} # namespace Typesetting
